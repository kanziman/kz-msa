package kr.kanzi.usersvc.mock;

import kr.kanzi.usersvc.common.exception.EntityNotFoundException;
import kr.kanzi.usersvc.domain.User;
import kr.kanzi.usersvc.service.port.UserRepository;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new CopyOnWriteArrayList<>();

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new EntityNotFoundException("user not found"));
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findFirst();
    }


    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> item.getUid() != null && item.getEmail().equals(email)).findFirst();
    }

    @Override
    public Optional<User> findByUid(String uid) {
        return data.stream().filter(item -> item.getUid() != null && item.getUid().equals(uid)).findFirst();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                .id(autoGeneratedId.incrementAndGet())
                    .uid(user.getUid())
                .email(user.getEmail())
                .nickname(user.getNickname())
                .role(user.getRole())
                .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }
}
